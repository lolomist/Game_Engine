#include "physics.hpp"
#include <vector>

int main() {
    std::vector<float> face1(108, 0.0);
    face1[0] = 1;
    face1[1] = 1; 
    face1[2] = -1.16842; 
    face1[3] = -1; 
    face1[4] = 1; 
    face1[5] = -1.16842; 
    face1[6] = -1; 
    face1[7] = 1; 
    face1[8] = 0.831577; 
    face1[9] = 1; 
    face1[10] = 1; 
    face1[11] = -1.16842; 
    face1[12] = -1; 
    face1[13] = 1; 
    face1[14] = 0.831577; 
    face1[15] = 1; 
    face1[16] = 1; 
    face1[17] = 0.831577; 
    face1[18] = 1; 
    face1[19] = -1; 
    face1[20] = 0.831577; 
    face1[21] = 1; 
    face1[22] = 1; 
    face1[23] = 0.831577; 
    face1[24] = -1; 
    face1[25] = 1; 
    face1[26] = 0.831577; 
    face1[27] = 1; 
    face1[28] = -1; 
    face1[29] = 0.831577; 
    face1[30] = -1; 
    face1[31] = 1; 
    face1[32] = 0.831577; 
    face1[33] = -1; 
    face1[34] = -1; 
    face1[35] = 0.831577; 
    face1[36] = -1; 
    face1[37] = -1; 
    face1[38] = 0.831577; 
    face1[39] = -1; 
    face1[40] = 1; 
    face1[41] = 0.831577; 
    face1[42] = -1; 
    face1[43] = 1; 
    face1[44] = -1.16842; 
    face1[45] = -1; 
    face1[46] = -1; 
    face1[47] = 0.831577; 
    face1[48] = -1; 
    face1[49] = 1; 
    face1[50] = -1.16842; 
    face1[51] = -1; 
    face1[52] = -1; 
    face1[53] = -1.16842; 
    face1[54] = -1; 
    face1[55] = -1; 
    face1[56] = -1.16842; 
    face1[57] = 1; 
    face1[58] = -1; 
    face1[59] = -1.16842; 
    face1[60] = 1; 
    face1[61] = -1; 
    face1[62] = 0.831577; 
    face1[63] = -1; 
    face1[64] = -1; 
    face1[65] = -1.16842; 
    face1[66] = 1; 
    face1[67] = -1; 
    face1[68] = 0.831577; 
    face1[69] = -1; 
    face1[70] = -1; 
    face1[71] = 0.831577; 
    face1[72] = 1; 
    face1[73] = -1; 
    face1[74] = -1.16842; 
    face1[75] = 1; 
    face1[76] = 1; 
    face1[77] = -1.16842; 
    face1[78] = 1; 
    face1[79] = 1; 
    face1[80] = 0.831577; 
    face1[81] = 1; 
    face1[82] = -1; 
    face1[83] = -1.16842; 
    face1[84] = 1; 
    face1[85] = 1; 
    face1[86] = 0.831577; 
    face1[87] = 1; 
    face1[88] = -1; 
    face1[89] = 0.831577; 
    face1[90] = -1; 
    face1[91] = -1; 
    face1[92] = -1.16842; 
    face1[93] = -1; 
    face1[94] = 1; 
    face1[95] = -1.16842; 
    face1[96] = 1; 
    face1[97] = 1; 
    face1[98] = -1.16842; 
    face1[99] = -1; 
    face1[100] = -1; 
    face1[101] = -1.16842; 
    face1[102] = 1;
    face1[103] = 1;
    face1[104] = -1.16842;
    face1[105] = 1;
    face1[106] = -1;
    face1[107] = -1;



    std::vector<float> face2(108, 0.0);
    face2[0] = 6;
    face2[1] = 1;
    face2[2] = 9;
    face2[3] = 4;
    face2[4] = 1;
    face2[5] = 9;
    face2[6] = 4;
    face2[7] = 1;
    face2[8] = 11;
    face2[9] = 6;
    face2[10] = 1;
    face2[11] = 9;
    face2[12] = 4;
    face2[13] = 1;
    face2[14] = 11;
    face2[15] = 6;
    face2[16] = 1;
    face2[17] = 11;
    face2[18] = 6;
    face2[19] = -1;
    face2[20] = 11;
    face2[21] = 6;
    face2[22] = 1;
    face2[23] = 11;
    face2[24] = 4;
    face2[25] = 1;
    face2[26] = 11;
    face2[27] = 6;
    face2[28] = -1;
    face2[29] = 11;
    face2[30] = 4;
    face2[31] = 1;
    face2[32] = 11;
    face2[33] = 4;
    face2[34] = -1;
    face2[35] = 11;
    face2[36] = 4;
    face2[37] = -1;
    face2[38] = 11;
    face2[39] = 4;
    face2[40] = 1;
    face2[41] = 11;
    face2[42] = 4;
    face2[43] = 1;
    face2[44] = 9;
    face2[45] = 4;
    face2[46] = -1;
    face2[47] = 11;
    face2[48] = 4;
    face2[49] = 1;
    face2[50] = 9;
    face2[51] = 4;
    face2[52] = -1;
    face2[53] = 9;
    face2[54] = 4;
    face2[55] = -1;
    face2[56] = 9;
    face2[57] = 6;
    face2[58] = -1;
    face2[59] = 9;
    face2[60] = 6;
    face2[61] = -1;
    face2[62] = 11;
    face2[63] = 4;
    face2[64] = -1;
    face2[65] = 9;
    face2[66] = 6;
    face2[67] = -1;
    face2[68] = 11;
    face2[69] = 4;
    face2[70] = -1;
    face2[71] = 11;
    face2[72] = 6;
    face2[73] = -1;
    face2[74] = 9;
    face2[75] = 6;
    face2[76] = 1;
    face2[77] = 9;
    face2[78] = 6;
    face2[79] = 1;
    face2[80] = 11;
    face2[81] = 6;
    face2[82] = -1;
    face2[83] = 9;
    face2[84] = 6;
    face2[85] = 1;
    face2[86] = 11;
    face2[87] = 6;
    face2[88] = -1;
    face2[89] = 11;
    face2[90] = 4;
    face2[91] = -1;
    face2[92] = 9;
    face2[93] = 4;
    face2[94] = 1;
    face2[95] = 9;
    face2[96] = 6;
    face2[97] = 1;
    face2[98] = 9;
    face2[99] = 4;
    face2[100] = -1;
    face2[101] = 9;
    face2[102] = 6;
    face2[103] = 1;
    face2[104] = 9;
    face2[105] = 1;
    face2[106] = -1;
    face2[107] = -1;


    std::cout << "DÃ©but du test" << std::endl;
    bool test = CheckCollision(face1, face2);
    if (test) {
        std::cout << "Ils sont en collision" << std::endl;
    } else {
        std::cout << "Ils ne sont pas en collision" << std::endl;
    }

    /*float camera[4] = {1, 0, 1};

    float *result = GetDirectionnalMovementVector(camera, 4);

    if (result != NULL) {
        std::cout << result[0] << std::endl;
        std::cout << result[1] << std::endl;
        std::cout << result[2] << std::endl;
    }
    else
        std::cout << "Error" << std::endl;*/
    

    return (0);
}